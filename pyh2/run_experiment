#!/usr/bin/env python
'''
==========================================================================
run_experiment
==========================================================================
Script that runs all 3 experiments and generate plots.

Author : Yanghui Ou
  Date : Jan 14, 2020
'''
import argparse
import sys
import os
import json
import re
import json

# Hacky way to add the project root directory to path
sys.path.insert( 0, os.path.dirname( os.path.dirname( os.path.abspath(__file__) ) ) )

from common_utils import run_cmd, TestReport

#-------------------------------------------------------------------------
# ExpResult
#-------------------------------------------------------------------------

class ExpResult:
  def __init__( self ):
    self.ntests     = []
    self.ntrans     = []
    self.nterminals = []
    self.complexity = []
    self.not_caught = 0

  def add_data( self, rpt ):
    if rpt.failed:
      self.ntests.append( rpt.ntests )
      self.ntrans.append( rpt.ntrans )
      self.nterminals.append( rpt.nterminals )
      self.complexity.append( rpt.complexity )
    else:
      self.not_caught += 1

  def to_dict( self ):
    return {
      'ntests': self.ntests,
      'ntrans': self.ntrans,
      'nterminals': self.nterminals,
      'complexity': self.complexity,
      'not_caught': self.not_caught,
    }

  def __str__( self ):
    return f'{self.to_dict()}'

#-------------------------------------------------------------------------
# parse_result
#-------------------------------------------------------------------------

begin_pattern = re.compile( r'^\s*(//|#)>-----+$' )
end_pattern   = re.compile( r'^\s*(//|#)<-----+$' )

def parse_result( result_str ):
  lst = result_str.split( '\n' )
  for i, line in enumerate( lst ):
    if begin_pattern.match( line ):
      return eval( lst[i+1] )

#=========================================================================
# main
#=========================================================================

def main():
  p = argparse.ArgumentParser( description='script runs crt, idt, and pyh2' )
  p.add_argument( '--bug-inj', action='store_true', help='use the random bug injector' )
  p.add_argument( '--nbugs',   type=int, default=100, metavar='', help='number of random bugs to experiment with' )
  p.add_argument( '--ntrials', type=int, default=10,  metavar='', help='number of trials per bug' )
  p.add_argument( '--max-examples',   type=int, default=100, metavar='', help='maximum number of test cases to run for random and hypothesis' )
  p.add_argument( '--tests-per-step', type=int, default=10,  metavar='', help='number of tests per step for iter deepen' )
  p.add_argument( '--translate', choices=['', 'sverilog', 'yosys'], default='', help='translation backend' )

  p.add_argument( '--max-nterminals', type=int, default=10,  metavar='', help='number of trials per bug' )
  p.add_argument( '--max-ntrans', type=int, default=10,  metavar='', help='number of trials per bug' )

  p.add_argument( '-s', '--trace',   action='store_true', help='show line trace' )
  p.add_argument( '-v', '--verbose', action='store_true', help='verbose mode' )

  opts = p.parse_args()

  res_crt  = ExpResult()
  res_idt  = ExpResult()
  res_pyh2 = ExpResult()

  translate_flag = f' --translate {opts.translate}' if opts.translate else ''

  for bug_idx in range( opts.nbugs ):

    # Inject a bug here
    print()

    for trial_idx in range( opts.ntrials ):
      print()
      print( '-'*74 )
      print( f'bug #{bug_idx+1} trial{trial_idx+1}')
      print( '-'*74 )

      # run crt test

      print()
      print( '*'*32 + ' crt ' + '*'*32 )
      result = run_cmd(
        f'../run_test crt --max-examples {opts.max_examples}'
        f' --max-ntrans {opts.max_ntrans}'
        f' --max-nterminals {opts.max_nterminals}'
        f'{translate_flag}'
      )
      rpt = parse_result( result )
      res_crt.add_data( rpt )

      # run idt test

      print()
      print( '*'*32 + ' idt ' + '*'*32 )
      result = run_cmd(
        f'../run_test idt --max-examples {opts.max_examples}'
        f' --tests-per-step {opts.tests_per_step}'
        f' --max-ntrans {opts.max_ntrans}'
        f' --max-nterminals {opts.max_nterminals}'
        f'{translate_flag}'
      )
      rpt = parse_result( result )
      res_idt.add_data( rpt )

      # run pyh2 test

      print()
      print( '*'*32 + ' pyh2 ' + '*'*32 )
      run_cmd( 'rm -rf .hypothesis/' )
      result = run_cmd(
        f'../run_test pyh2 --max-examples {opts.max_examples}'
        f' --max-ntrans {opts.max_ntrans}'
        f' --max-nterminals {opts.max_nterminals}'
        f'{translate_flag}'
      )
      rpt = parse_result( result )
      res_pyh2.add_data( rpt )

  # Store the data into json files
  raw_data = {}
  raw_data[ 'crt'  ] = res_crt.to_dict()
  raw_data[ 'idt'  ] = res_idt.to_dict()
  raw_data[ 'pyh2' ] = res_pyh2.to_dict()

  json_name = (
    f'ring-{opts.ntrials}t-'
    f'{opts.max_examples}e-'
    f'{opts.tests_per_step}s-'
    f'{opts.max_ntrans}x-'
    f'{opts.max_nterminals}n.json'
  )
  with open( json_name, 'w' ) as f:
    json.dump( raw_data, f, indent=2 )

if __name__ == '__main__':
  main()
